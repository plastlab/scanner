name: Build iOS App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_profile:
        description: 'Build profile'
        required: true
        default: 'preview'
        type: choice
        options:
        - development
        - preview
        - production

jobs:
  build-ios:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Expo CLI
      run: npm install -g @expo/cli eas-cli
      
    - name: Login to Expo
      run: eas login --non-interactive
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        
    - name: Configure build
      run: |
        if [ ! -f "eas.json" ]; then
          eas build:configure --non-interactive
        fi
        
    - name: Build iOS
      run: |
        PROFILE="${{ github.event.inputs.build_profile || 'preview' }}"
        echo "Building with profile: $PROFILE"
        eas build --platform ios --profile $PROFILE --non-interactive
      env:
        EXPO_IOS_DIST_P12_PASSWORD: ${{ secrets.EXPO_IOS_DIST_P12_PASSWORD }}
        EXPO_IOS_DIST_P12_BASE64: ${{ secrets.EXPO_IOS_DIST_P12_BASE64 }}
        EXPO_IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.EXPO_IOS_PROVISIONING_PROFILE_BASE64 }}
        EXPO_APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.EXPO_APPLE_APP_SPECIFIC_PASSWORD }}
        EXPO_APPLE_TEAM_ID: ${{ secrets.EXPO_APPLE_TEAM_ID }}
        
    - name: Get build artifacts
      run: |
        BUILD_ID=$(eas build:list --platform ios --limit 1 --json | jq -r '.[0].id')
        echo "Build ID: $BUILD_ID"
        
        # Wait for build to complete
        while true; do
          STATUS=$(eas build:view $BUILD_ID --json | jq -r '.status')
          echo "Build status: $STATUS"
          
          if [ "$STATUS" = "finished" ]; then
            echo "Build completed successfully!"
            DOWNLOAD_URL=$(eas build:view $BUILD_ID --json | jq -r '.artifacts.buildUrl')
            if [ "$DOWNLOAD_URL" != "null" ] && [ -n "$DOWNLOAD_URL" ]; then
              echo "DOWNLOAD_URL=$DOWNLOAD_URL" >> $GITHUB_ENV
              echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
            fi
            break
          elif [ "$STATUS" = "errored" ]; then
            echo "Build failed!"
            exit 1
          elif [ "$STATUS" = "canceled" ]; then
            echo "Build was canceled!"
            exit 1
          fi
          
          sleep 30
        done
        
    - name: Download .ipa file
      if: env.DOWNLOAD_URL != ''
      run: |
        mkdir -p builds
        curl -L "$DOWNLOAD_URL" -o "builds/plastic-tracker.ipa"
        echo "Downloaded .ipa file"
        
    - name: Upload build artifact
      if: env.DOWNLOAD_URL != ''
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-${{ github.run_number }}
        path: builds/
        retention-days: 30
        
    - name: Create release
      if: github.event_name == 'workflow_dispatch' && env.DOWNLOAD_URL != ''
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: iOS Build v${{ github.run_number }}
        body: |
          iOS build for Plastic Tracker app
          
          **Build Details:**
          - Build ID: ${{ env.BUILD_ID }}
          - Profile: ${{ github.event.inputs.build_profile || 'preview' }}
          - Commit: ${{ github.sha }}
          
          **Installation:**
          Download the .ipa file and install via TestFlight or direct installation.
        files: builds/plastic-tracker.ipa
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Comment on PR
      if: github.event_name == 'pull_request' && env.DOWNLOAD_URL != ''
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comment } = await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ iOS build completed successfully!
          
          **Build Details:**
          - Build ID: ${process.env.BUILD_ID}
          - Download URL: ${process.env.DOWNLOAD_URL}
          
          You can download the .ipa file from the build artifacts.`
          }); 